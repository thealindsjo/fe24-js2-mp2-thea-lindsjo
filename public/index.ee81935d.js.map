{"mappings":"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","sources":["<anon>","src/main.ts","src/modules/api.ts","src/modules/product.ts","src/modules/cart.ts","src/modules/filter.ts"],"sourcesContent":["async function $fe11eb32f95cc6d1$export$2516233d5dae329e() {\n    const response = await fetch(\"https://dummyjson.com/products\");\n    const data = await response.json();\n    return data.products;\n}\n\n\nclass $86c81ebf6244b2d0$export$264ad599d7cef668 {\n    constructor({ title: title, thumbnail: thumbnail, stock: stock, price: price, discountPercentage: discountPercentage, category: category, rating: rating }){\n        this.title = title;\n        this.thumbnail = thumbnail;\n        this.stock = stock;\n        this.price = price;\n        this.discountPercentage = discountPercentage;\n        this.category = category;\n        this.rating = rating;\n    }\n    getDiscountedPrice() {\n        return (this.price * (1 - this.discountPercentage / 100)).toFixed(2);\n    }\n    updateStock(amount) {\n        this.stock = Math.max(this.stock - amount, 0);\n    }\n    get productStock() {\n        return this.stock;\n    }\n    get productCategory() {\n        return this.category;\n    }\n    get productRating() {\n        return this.rating;\n    }\n    renderProductCard(onAddToCart) {\n        const card = document.createElement(\"div\");\n        card.className = \"product-card\";\n        const originalPrice = this.price.toFixed(2);\n        const discountedPrice = this.getDiscountedPrice();\n        card.innerHTML = `\n            <img src=\"${this.thumbnail}\" alt=\"${this.title}\">\n            <h3>${this.title}</h3>\n            <p>\n                Price: <span class=\"original-price\">$${originalPrice}</span>\n                <span class=\"discounted-price\">$${discountedPrice}</span>\n            </p>\n            <p>Stock: ${this.stock}</p>\n            <div><button class=\"add-to-cart\">Add to Cart</button></div>\n        `;\n        card.querySelector(\".add-to-cart\").addEventListener(\"click\", ()=>{\n            if (this.stock > 0) {\n                onAddToCart();\n                this.updateStock(1);\n                card.querySelector(\"p:nth-child(4)\").textContent = `Stock: ${this.stock}`;\n            } else alert(\"Out of stock!\");\n        });\n        return card;\n    }\n}\n\n\nclass $dc421793dfb3ed27$export$494d083da011ade5 {\n    addProduct(product) {\n        this.items.push(product);\n    }\n    getItems() {\n        return this.items;\n    }\n    getTotalPrice() {\n        return this.items.reduce((total, product)=>total + parseFloat(product.getDiscountedPrice()), 0).toFixed(2);\n    }\n    constructor(){\n        this.items = [];\n    }\n}\n\n\nfunction $d1cdcf3828e16a44$export$6d1731a321e8bdf4(products, category) {\n    return products.filter((product)=>product.productCategory === category);\n}\nfunction $d1cdcf3828e16a44$export$37d568e1c36a0ac2(products, maxPrice) {\n    return products.filter((product)=>parseFloat(product.getDiscountedPrice()) <= maxPrice);\n}\nfunction $d1cdcf3828e16a44$export$799bcc2b7243bbab(products, ascending = true) {\n    return products.sort((a, b)=>{\n        return ascending ? parseFloat(a.getDiscountedPrice()) - parseFloat(b.getDiscountedPrice()) : parseFloat(b.getDiscountedPrice()) - parseFloat(a.getDiscountedPrice());\n    });\n}\nfunction $d1cdcf3828e16a44$export$9676315b8d6e55bf(products, ascending = true) {\n    return products.sort((a, b)=>ascending ? a.productRating - b.productRating : b.productRating - a.productRating);\n}\n\n\ndocument.addEventListener(\"DOMContentLoaded\", async ()=>{\n    const cart = new (0, $dc421793dfb3ed27$export$494d083da011ade5)();\n    let products = (await (0, $fe11eb32f95cc6d1$export$2516233d5dae329e)()).map((productData)=>new (0, $86c81ebf6244b2d0$export$264ad599d7cef668)(productData));\n    let currentCategory = \"\";\n    let currentMaxPrice = null;\n    let currentSortMethod = \"price\";\n    let isAscending = true;\n    function renderFilteredAndSortedProducts() {\n        let filteredProducts = products;\n        if (currentCategory) filteredProducts = (0, $d1cdcf3828e16a44$export$6d1731a321e8bdf4)(filteredProducts, currentCategory);\n        if (currentMaxPrice !== null) filteredProducts = (0, $d1cdcf3828e16a44$export$37d568e1c36a0ac2)(filteredProducts, currentMaxPrice);\n        if (currentSortMethod === \"price\") filteredProducts = (0, $d1cdcf3828e16a44$export$799bcc2b7243bbab)(filteredProducts, isAscending);\n        else if (currentSortMethod === \"rating\") filteredProducts = (0, $d1cdcf3828e16a44$export$9676315b8d6e55bf)(filteredProducts, isAscending);\n        renderProducts(filteredProducts);\n    }\n    function renderProducts(productsToRender) {\n        const container = document.querySelector(\"#product-list\");\n        container.innerHTML = \"\";\n        productsToRender.forEach((product)=>{\n            container.appendChild(product.renderProductCard(()=>cart.addProduct(product)));\n        });\n    }\n    document.querySelector(\"#category-filter\").addEventListener(\"change\", (event)=>{\n        currentCategory = event.target.value;\n        renderFilteredAndSortedProducts();\n    });\n    document.querySelector(\"#price-filter\").addEventListener(\"input\", (event)=>{\n        currentMaxPrice = parseFloat(event.target.value) || null;\n        renderFilteredAndSortedProducts();\n    });\n    document.querySelector(\"#sort-price\").addEventListener(\"click\", ()=>{\n        currentSortMethod = \"price\";\n        isAscending = !isAscending;\n        renderFilteredAndSortedProducts();\n    });\n    document.querySelector(\"#sort-rating\").addEventListener(\"click\", ()=>{\n        currentSortMethod = \"rating\";\n        isAscending = !isAscending;\n        renderFilteredAndSortedProducts();\n    });\n    renderFilteredAndSortedProducts();\n});\n\n\n//# sourceMappingURL=index.ee81935d.js.map\n","import { fetchProducts } from \"./modules/api.ts\";\nimport { Product } from \"./modules/product.ts\";\nimport { Cart } from \"./modules/cart.ts\";\nimport { filterByCategory, filterByPrice, sortByPrice, sortByRating } from \"./modules/filter.ts\";\n\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\n    const cart = new Cart();\n    let products: Product[] = (await fetchProducts()).map(productData => new Product(productData));\n\n    let currentCategory: string = \"\";\n    let currentMaxPrice: number | null = null;\n    let currentSortMethod: string = \"price\";\n    let isAscending: boolean = true;\n\n    function renderFilteredAndSortedProducts() {\n        let filteredProducts = products;\n\n        if (currentCategory) {\n            filteredProducts = filterByCategory(filteredProducts, currentCategory);\n        }\n\n        if (currentMaxPrice !== null) {\n            filteredProducts = filterByPrice(filteredProducts, currentMaxPrice);\n        }\n\n        if (currentSortMethod === \"price\") {\n            filteredProducts = sortByPrice(filteredProducts, isAscending);\n        } else if (currentSortMethod === \"rating\") {\n            filteredProducts = sortByRating(filteredProducts, isAscending);\n        }\n\n        renderProducts(filteredProducts);\n    }\n\n    function renderProducts(productsToRender: Product[]) {\n        const container = document.querySelector(\"#product-list\") as HTMLElement;\n        container.innerHTML = \"\";\n        productsToRender.forEach(product => {\n            container.appendChild(product.renderProductCard(() => cart.addProduct(product)));\n        });\n    }\n\n    document.querySelector(\"#category-filter\")!.addEventListener(\"change\", event => {\n        currentCategory = (event.target as HTMLSelectElement).value;\n        renderFilteredAndSortedProducts();\n    });\n\n    document.querySelector(\"#price-filter\")!.addEventListener(\"input\", event => {\n        currentMaxPrice = parseFloat((event.target as HTMLInputElement).value) || null;\n        renderFilteredAndSortedProducts();\n    });\n\n    document.querySelector(\"#sort-price\")!.addEventListener(\"click\", () => {\n        currentSortMethod = \"price\";\n        isAscending = !isAscending;\n        renderFilteredAndSortedProducts();\n    });\n\n    document.querySelector(\"#sort-rating\")!.addEventListener(\"click\", () => {\n        currentSortMethod = \"rating\";\n        isAscending = !isAscending;\n        renderFilteredAndSortedProducts();\n    });\n\n    renderFilteredAndSortedProducts();\n});\n","export async function fetchProducts() {\n    const response = await fetch(\"https://dummyjson.com/products\");\n    const data = await response.json();\n    return data.products;\n}\n","export class Product {\n    private title: string;\n    private thumbnail: string;\n    private stock: number;\n    private price: number;\n    private discountPercentage: number;\n    private category: string;\n    private rating: number;\n\n    constructor({ title, thumbnail, stock, price, discountPercentage, category, rating }: \n        { title: string; thumbnail: string; stock: number; price: number; discountPercentage: number; category: string; rating: number; }) {\n        this.title = title;\n        this.thumbnail = thumbnail;\n        this.stock = stock;\n        this.price = price;\n        this.discountPercentage = discountPercentage;\n        this.category = category;\n        this.rating = rating;\n    }\n\n    getDiscountedPrice(): string {\n        return (this.price * (1 - this.discountPercentage / 100)).toFixed(2);\n    }\n\n    updateStock(amount: number): void {\n        this.stock = Math.max(this.stock - amount, 0);\n    }\n\n    get productStock(): number {\n        return this.stock;\n    }\n\n    get productCategory(): string {\n        return this.category;\n    }\n\n    get productRating(): number {\n        return this.rating;\n    }\n\n    renderProductCard(onAddToCart: () => void): HTMLElement {\n        const card = document.createElement(\"div\");\n        card.className = \"product-card\";\n\n        const originalPrice = this.price.toFixed(2);\n        const discountedPrice = this.getDiscountedPrice();\n\n        card.innerHTML = `\n            <img src=\"${this.thumbnail}\" alt=\"${this.title}\">\n            <h3>${this.title}</h3>\n            <p>\n                Price: <span class=\"original-price\">$${originalPrice}</span>\n                <span class=\"discounted-price\">$${discountedPrice}</span>\n            </p>\n            <p>Stock: ${this.stock}</p>\n            <div><button class=\"add-to-cart\">Add to Cart</button></div>\n        `;\n\n        card.querySelector(\".add-to-cart\")!.addEventListener(\"click\", () => {\n            if (this.stock > 0) {\n                onAddToCart();\n                this.updateStock(1);\n                card.querySelector(\"p:nth-child(4)\")!.textContent = `Stock: ${this.stock}`;\n            } else {\n                alert(\"Out of stock!\");\n            }\n        });\n\n        return card;\n    }\n}\n","import { Product } from './product.ts';\n\nexport class Cart {\n    private items: Product[] = [];\n\n    addProduct(product: Product): void {\n        this.items.push(product);\n    }\n\n    getItems(): Product[] {\n        return this.items;\n    }\n\n    getTotalPrice(): string {\n        return this.items.reduce((total, product) => total + parseFloat(product.getDiscountedPrice()), 0).toFixed(2);\n    }\n}","import { Product } from \"./product\";\n\nexport function filterByCategory(products: Product[], category: string): Product[] {\n    return products.filter(product => product.productCategory === category);\n}\n\nexport function filterByPrice(products: Product[], maxPrice: number): Product[] {\n    return products.filter(product => parseFloat(product.getDiscountedPrice()) <= maxPrice);\n}\n\nexport function sortByPrice(products: Product[], ascending: boolean = true): Product[] {\n    return products.sort((a, b) => {\n        return ascending ? parseFloat(a.getDiscountedPrice()) - parseFloat(b.getDiscountedPrice()) : parseFloat(b.getDiscountedPrice()) - parseFloat(a.getDiscountedPrice());\n    });\n}\n\nexport function sortByRating(products: Product[], ascending: boolean = true): Product[] {\n    return products.sort((a, b) => ascending ? a.productRating - b.productRating : b.productRating - a.productRating);\n}\n"],"names":["$fe11eb32f95cc6d1$export$2516233d5dae329e","response","fetch","data","json","products","$86c81ebf6244b2d0$export$264ad599d7cef668","constructor","title","thumbnail","stock","price","discountPercentage","category","rating","getDiscountedPrice","toFixed","updateStock","amount","Math","max","productStock","productCategory","productRating","renderProductCard","onAddToCart","card","document","createElement","className","originalPrice","discountedPrice","innerHTML","querySelector","addEventListener","textContent","alert","$dc421793dfb3ed27$export$494d083da011ade5","addProduct","product","items","push","getItems","getTotalPrice","reduce","total","parseFloat","cart","map","productData","currentCategory","currentMaxPrice","currentSortMethod","isAscending","renderFilteredAndSortedProducts","maxPrice","filteredProducts","filter","ascending","sort","a","b","renderProducts","productsToRender","container","forEach","appendChild","event","target","value"],"version":3,"file":"index.ee81935d.js.map"}